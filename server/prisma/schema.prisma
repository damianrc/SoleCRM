generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id
  email            String    @unique
  displayName      String?
  profileImage     String?   // Base64 encoded image data
  passwordHash     String
  contacts         Contact[]
  tasks            Task[]
  activeTheme      String    @default("light")
  jobTitle         String?   // User's job title (nullable)
  
  // Custom property definitions for this user
  customProperties CustomPropertyDefinition[]

  @@map("users")
}

model Contact {
  id        String   @id
  // Hard-coded core properties (always present)
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User?    @relation(fields: [userId], references: [id])

  // Dynamic custom field values
  customFieldValues ContactCustomFieldValue[]
  
  // Relations
  tasks      Task[]
  notes      Note[]
  activities Activity[]
  
  // Add indexes for better query performance
  @@index([userId])
  @@index([userId, createdAt])
  @@index([name])
  @@index([email])
  @@map("contacts")
}

// Define what custom properties are available for a user
model CustomPropertyDefinition {
  id           String                     @id @default(cuid())
  userId       String
  name         String                     // Display name (e.g., "Lead Source")
  fieldKey     String                     // Internal key (e.g., "lead_source")
  fieldType    CustomFieldType
  isRequired   Boolean                    @default(false)
  defaultValue String?
  options      CustomPropertyOption[]     // For dropdown/multiselect
  sortOrder    Int                        @default(0)
  isActive     Boolean                    @default(true)
  createdAt    DateTime                   @default(now())
  updatedAt    DateTime                   @updatedAt
  
  user         User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  fieldValues  ContactCustomFieldValue[]
  
  // Ensure unique field keys per user
  @@unique([userId, fieldKey])
  @@index([userId, isActive])
  @@index([userId, sortOrder])
  @@map("custom_property_definitions")
}

// Options for dropdown/multiselect custom properties
model CustomPropertyOption {
  id         String                   @id @default(cuid())
  propertyId String
  label      String                   // Display text
  value      String                   // Internal value
  sortOrder  Int                      @default(0)
  isActive   Boolean                  @default(true)
  createdAt  DateTime                 @default(now())
  
  property   CustomPropertyDefinition @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@index([propertyId, sortOrder])
  @@map("custom_property_options")
}

// Store actual custom field values for contacts
model ContactCustomFieldValue {
  id         String                   @id @default(cuid())
  contactId  String
  propertyId String
  value      String                   // JSON string for complex types
  createdAt  DateTime                 @default(now())
  updatedAt  DateTime                 @updatedAt
  
  contact    Contact                  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  property   CustomPropertyDefinition @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  // Ensure one value per property per contact
  @@unique([contactId, propertyId])
  @@index([contactId])
  @@index([propertyId])
  @@map("contact_custom_field_values")
}

model Task {
  id            String       @id @default(cuid())
  contactId     String
  title         String
  description   String?
  status        TaskStatus   @default(PENDING)
  priority      TaskPriority @default(MEDIUM)
  dueDate       DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  contact       Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)

  userId        String
  user          User         @relation(fields: [userId], references: [id])

  @@map("tasks")
}

model Note {
  id            String   @id @default(cuid())
  contactId     String
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  contact       Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Activity {
  id            String       @id @default(cuid())
  contactId     String
  type          ActivityType
  title         String
  description   String?
  createdAt     DateTime     @default(now())

  contact       Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("activities")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  NOTE
  WHATSAPP
  TASK_CREATED
  TASK_COMPLETED
  STATUS_CHANGED
}

enum CustomFieldType {
  TEXT
  NUMBER
  EMAIL
  PHONE
  DATE
  DATETIME
  BOOLEAN
  DROPDOWN
  MULTISELECT
  URL
  TEXTAREA
}