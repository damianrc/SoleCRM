generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  displayName   String?
  profileImage  String?   // Base64 encoded image data
  passwordHash  String
  contacts      Contact[]
  tasks         Task[]

  @@map("users")
}

model Contact {
  id            String         @id
  name          String
  email         String?
  phone         String?
  address       String?
  suburb        String?
  contactType   ContactType    @default(LEAD)
  leadSource    String?
  status        ContactStatus  @default(NEW)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  userId        String
  user          User?          @relation(fields: [userId], references: [id])

  // Relations
  customFields  ContactCustomField[]
  tasks         Task[]
  notes         Note[]
  activities    Activity[]
  
  // Add indexes for better query performance
  @@index([userId])
  @@index([userId, createdAt])
  @@index([userId, contactType])
  @@index([userId, status])
  @@index([name])
  @@index([email])
  @@map("contacts")
}

model ContactCustomField {
  id            String          @id @default(cuid())
  contactId     String
  fieldName     String
  fieldValue    String
  fieldType     CustomFieldType @default(TEXT)
  contact       Contact         @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  @@map("contact_custom_fields")
}

model Task {
  id            String       @id @default(cuid())
  contactId     String
  title         String
  description   String?
  status        TaskStatus   @default(PENDING)
  priority      TaskPriority @default(MEDIUM)
  dueDate       DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  contact       Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)

  userId        String
  user          User         @relation(fields: [userId], references: [id])

  @@map("tasks")
}

model Note {
  id            String   @id @default(cuid())
  contactId     String
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  contact       Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Activity {
  id            String       @id @default(cuid())
  contactId     String
  type          ActivityType
  title         String
  description   String?
  createdAt     DateTime     @default(now())

  contact       Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("activities")
}

enum ContactStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum ContactType {
  BUYER
  SELLER
  PAST_CLIENT
  LEAD
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  NOTE
  WHATSAPP
  TASK_CREATED
  TASK_COMPLETED
  STATUS_CHANGED
}

enum CustomFieldType {
  TEXT
  NUMBER
  EMAIL
  PHONE
  DATE
  BOOLEAN
}